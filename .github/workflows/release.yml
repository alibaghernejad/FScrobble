name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      assembly_information: ${{ steps.retrieve-versions.outputs.assembly_information }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Retrieve Assembly Versions
        id: retrieve-versions
        run: |
          assemblyVersion=$(grep -oPm1 "(?<=<AssemblyVersion>)[^<]+" src/FScrobble.Shell/FScrobble.Shell.fsproj)
          assemblyFileVersion=$(grep -oPm1 "(?<=<AssemblyFileVersion>)[^<]+" src/FScrobble.Shell/FScrobble.Shell.fsproj)
          assemblyInformationVersion=$(grep -oPm1 "(?<=<AssemblyInformationVersion>)[^<]+" src/FScrobble.Shell/FScrobble.Shell.fsproj)
          buildVersion=${{ github.run_number }}
          assemblyInfo=$(echo "$assemblyInformationVersion" | sed "s/\$(BuildNumber)/$buildVersion/")

          echo "Assembly Version: $assemblyVersion"
          echo "Assembly File Version: $assemblyFileVersion"
          echo "Assembly Information Version: $assemblyInformationVersion"
          echo "assembly_version=$assemblyVersion" >> $GITHUB_OUTPUT
          echo "assembly_file_version=$assemblyFileVersion" >> $GITHUB_OUTPUT
          echo "assembly_information=$assemblyInfo" >> $GITHUB_OUTPUT

      
      - name: Create git Tag
        run: |
          version_information_handle=${{ steps.retrieve-versions.outputs.assembly_information }}
          echo $version_information_handle
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com" 
          git tag -a $version_information_handle -m "Release version $version_information_handle"
          git push origin $version_information_handle

      - name: Push all tags
        run: git push --tags

      - name: Checkout tags 
        run: |
          git fetch --tags
          echo "Current tags:"
          git tag --list
          echo "Fetched tags successfully."
          echo "Total number of tags: $(git tag | wc -l)"

      - name: Restore dependencies
        run: dotnet restore src/FScrobble.Shell/FScrobble.Shell.fsproj

      - name: Build project
        run: dotnet build src/FScrobble.Shell/FScrobble.Shell.fsproj --configuration Release /p:BuildNumber=${{ github.run_number }}

      - name: Publish project
        run: |
          dotnet publish src/FScrobble.Shell/FScrobble.Shell.fsproj -r linux-x64 --configuration Release --self-contained true --output ./publish

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: FScrobble-linux-x64
          path: ./publish

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:    

      - name: Echo Release Info
        id: release_info
        run: echo "Version Info ${{ needs.build.outputs.assembly_information }} "

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: FScrobble-linux-x64
          path: ./publish
          
      - name: Verify Downloaded Files
        run: ls -R ./publish

      - name: File and Folders Cleanup
        run: |
          rm -rf \
          ./publish/cs \
          ./publish/zh-Hant \
          ./publish/zh-Hans \
          ./publish/tr \
          ./publish/ru \
          ./publish/pt-BR \
          ./publish/pl \
          ./publish/ko \
          ./publish/ja \
          ./publish/it \
          ./publish/fr \
          ./publish/es \
          ./publish/de
          echo "Publish directory cleaned up."


      - name: Create Archive Files
        run: |
          chmod +x ./publish/FScrobble.Shell
          tar --owner=0 --group=0 --numeric-owner -czvf "FScrobble-${{ needs.build.outputs.assembly_information }}-linux-x64.tar.gz" -C ./publish .
          cp FScrobble-${{ needs.build.outputs.assembly_information }}-linux-x64.tar.gz FScrobble-latest-linux-x64.tar.gz

          echo "Archive files created successfully."  

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.assembly_information }}
          files: |
            ./FScrobble-${{ needs.build.outputs.assembly_information }}-linux-x64.tar.gz 
            ./FScrobble-latest-linux-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
